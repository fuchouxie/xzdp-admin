// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"xzdp-admin/app/gen/dal/entity"
)

func newTbVoucher(db *gorm.DB, opts ...gen.DOOption) tbVoucher {
	_tbVoucher := tbVoucher{}

	_tbVoucher.tbVoucherDo.UseDB(db, opts...)
	_tbVoucher.tbVoucherDo.UseModel(&entity.TbVoucher{})

	tableName := _tbVoucher.tbVoucherDo.TableName()
	_tbVoucher.ALL = field.NewAsterisk(tableName)
	_tbVoucher.ID = field.NewInt64(tableName, "id")
	_tbVoucher.ShopID = field.NewInt64(tableName, "shop_id")
	_tbVoucher.Title = field.NewString(tableName, "title")
	_tbVoucher.SubTitle = field.NewString(tableName, "sub_title")
	_tbVoucher.Rules = field.NewString(tableName, "rules")
	_tbVoucher.PayValue = field.NewInt64(tableName, "pay_value")
	_tbVoucher.ActualValue = field.NewInt64(tableName, "actual_value")
	_tbVoucher.Type = field.NewBool(tableName, "type")
	_tbVoucher.Status = field.NewBool(tableName, "status")
	_tbVoucher.CreateTime = field.NewTime(tableName, "create_time")
	_tbVoucher.UpdateTime = field.NewTime(tableName, "update_time")

	_tbVoucher.fillFieldMap()

	return _tbVoucher
}

type tbVoucher struct {
	tbVoucherDo tbVoucherDo

	ALL         field.Asterisk
	ID          field.Int64  // 主键
	ShopID      field.Int64  // 商铺id
	Title       field.String // 代金券标题
	SubTitle    field.String // 副标题
	Rules       field.String // 使用规则
	PayValue    field.Int64  // 支付金额，单位是分。例如200代表2元
	ActualValue field.Int64  // 抵扣金额，单位是分。例如200代表2元
	Type        field.Bool   // 0,普通券；1,秒杀券
	Status      field.Bool   // 1,上架; 2,下架; 3,过期
	CreateTime  field.Time   // 创建时间
	UpdateTime  field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (t tbVoucher) Table(newTableName string) *tbVoucher {
	t.tbVoucherDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tbVoucher) As(alias string) *tbVoucher {
	t.tbVoucherDo.DO = *(t.tbVoucherDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tbVoucher) updateTableName(table string) *tbVoucher {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.ShopID = field.NewInt64(table, "shop_id")
	t.Title = field.NewString(table, "title")
	t.SubTitle = field.NewString(table, "sub_title")
	t.Rules = field.NewString(table, "rules")
	t.PayValue = field.NewInt64(table, "pay_value")
	t.ActualValue = field.NewInt64(table, "actual_value")
	t.Type = field.NewBool(table, "type")
	t.Status = field.NewBool(table, "status")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateTime = field.NewTime(table, "update_time")

	t.fillFieldMap()

	return t
}

func (t *tbVoucher) WithContext(ctx context.Context) *tbVoucherDo {
	return t.tbVoucherDo.WithContext(ctx)
}

func (t tbVoucher) TableName() string { return t.tbVoucherDo.TableName() }

func (t tbVoucher) Alias() string { return t.tbVoucherDo.Alias() }

func (t *tbVoucher) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tbVoucher) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.ID
	t.fieldMap["shop_id"] = t.ShopID
	t.fieldMap["title"] = t.Title
	t.fieldMap["sub_title"] = t.SubTitle
	t.fieldMap["rules"] = t.Rules
	t.fieldMap["pay_value"] = t.PayValue
	t.fieldMap["actual_value"] = t.ActualValue
	t.fieldMap["type"] = t.Type
	t.fieldMap["status"] = t.Status
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_time"] = t.UpdateTime
}

func (t tbVoucher) clone(db *gorm.DB) tbVoucher {
	t.tbVoucherDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tbVoucher) replaceDB(db *gorm.DB) tbVoucher {
	t.tbVoucherDo.ReplaceDB(db)
	return t
}

type tbVoucherDo struct{ gen.DO }

func (t tbVoucherDo) Debug() *tbVoucherDo {
	return t.withDO(t.DO.Debug())
}

func (t tbVoucherDo) WithContext(ctx context.Context) *tbVoucherDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tbVoucherDo) ReadDB() *tbVoucherDo {
	return t.Clauses(dbresolver.Read)
}

func (t tbVoucherDo) WriteDB() *tbVoucherDo {
	return t.Clauses(dbresolver.Write)
}

func (t tbVoucherDo) Session(config *gorm.Session) *tbVoucherDo {
	return t.withDO(t.DO.Session(config))
}

func (t tbVoucherDo) Clauses(conds ...clause.Expression) *tbVoucherDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tbVoucherDo) Returning(value interface{}, columns ...string) *tbVoucherDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tbVoucherDo) Not(conds ...gen.Condition) *tbVoucherDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tbVoucherDo) Or(conds ...gen.Condition) *tbVoucherDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tbVoucherDo) Select(conds ...field.Expr) *tbVoucherDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tbVoucherDo) Where(conds ...gen.Condition) *tbVoucherDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tbVoucherDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tbVoucherDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tbVoucherDo) Order(conds ...field.Expr) *tbVoucherDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tbVoucherDo) Distinct(cols ...field.Expr) *tbVoucherDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tbVoucherDo) Omit(cols ...field.Expr) *tbVoucherDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tbVoucherDo) Join(table schema.Tabler, on ...field.Expr) *tbVoucherDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tbVoucherDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tbVoucherDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tbVoucherDo) RightJoin(table schema.Tabler, on ...field.Expr) *tbVoucherDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tbVoucherDo) Group(cols ...field.Expr) *tbVoucherDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tbVoucherDo) Having(conds ...gen.Condition) *tbVoucherDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tbVoucherDo) Limit(limit int) *tbVoucherDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tbVoucherDo) Offset(offset int) *tbVoucherDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tbVoucherDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tbVoucherDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tbVoucherDo) Unscoped() *tbVoucherDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tbVoucherDo) Create(values ...*entity.TbVoucher) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tbVoucherDo) CreateInBatches(values []*entity.TbVoucher, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tbVoucherDo) Save(values ...*entity.TbVoucher) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tbVoucherDo) First() (*entity.TbVoucher, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TbVoucher), nil
	}
}

func (t tbVoucherDo) Take() (*entity.TbVoucher, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TbVoucher), nil
	}
}

func (t tbVoucherDo) Last() (*entity.TbVoucher, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TbVoucher), nil
	}
}

func (t tbVoucherDo) Find() ([]*entity.TbVoucher, error) {
	result, err := t.DO.Find()
	return result.([]*entity.TbVoucher), err
}

func (t tbVoucherDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.TbVoucher, err error) {
	buf := make([]*entity.TbVoucher, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tbVoucherDo) FindInBatches(result *[]*entity.TbVoucher, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tbVoucherDo) Attrs(attrs ...field.AssignExpr) *tbVoucherDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tbVoucherDo) Assign(attrs ...field.AssignExpr) *tbVoucherDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tbVoucherDo) Joins(fields ...field.RelationField) *tbVoucherDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tbVoucherDo) Preload(fields ...field.RelationField) *tbVoucherDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tbVoucherDo) FirstOrInit() (*entity.TbVoucher, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TbVoucher), nil
	}
}

func (t tbVoucherDo) FirstOrCreate() (*entity.TbVoucher, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TbVoucher), nil
	}
}

func (t tbVoucherDo) FindByPage(offset int, limit int) (result []*entity.TbVoucher, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tbVoucherDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tbVoucherDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tbVoucherDo) Delete(models ...*entity.TbVoucher) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tbVoucherDo) withDO(do gen.Dao) *tbVoucherDo {
	t.DO = *do.(*gen.DO)
	return t
}
