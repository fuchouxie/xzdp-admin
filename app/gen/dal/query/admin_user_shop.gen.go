// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"xzdp-admin/app/gen/dal/entity"
)

func newAdminUserShop(db *gorm.DB, opts ...gen.DOOption) adminUserShop {
	_adminUserShop := adminUserShop{}

	_adminUserShop.adminUserShopDo.UseDB(db, opts...)
	_adminUserShop.adminUserShopDo.UseModel(&entity.AdminUserShop{})

	tableName := _adminUserShop.adminUserShopDo.TableName()
	_adminUserShop.ALL = field.NewAsterisk(tableName)
	_adminUserShop.AdminUserID = field.NewInt32(tableName, "admin_user_id")
	_adminUserShop.ShopID = field.NewInt32(tableName, "shop_id")

	_adminUserShop.fillFieldMap()

	return _adminUserShop
}

type adminUserShop struct {
	adminUserShopDo adminUserShopDo

	ALL         field.Asterisk
	AdminUserID field.Int32 // 后台用户id
	ShopID      field.Int32 // 商店id

	fieldMap map[string]field.Expr
}

func (a adminUserShop) Table(newTableName string) *adminUserShop {
	a.adminUserShopDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminUserShop) As(alias string) *adminUserShop {
	a.adminUserShopDo.DO = *(a.adminUserShopDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminUserShop) updateTableName(table string) *adminUserShop {
	a.ALL = field.NewAsterisk(table)
	a.AdminUserID = field.NewInt32(table, "admin_user_id")
	a.ShopID = field.NewInt32(table, "shop_id")

	a.fillFieldMap()

	return a
}

func (a *adminUserShop) WithContext(ctx context.Context) *adminUserShopDo {
	return a.adminUserShopDo.WithContext(ctx)
}

func (a adminUserShop) TableName() string { return a.adminUserShopDo.TableName() }

func (a adminUserShop) Alias() string { return a.adminUserShopDo.Alias() }

func (a *adminUserShop) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminUserShop) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 2)
	a.fieldMap["admin_user_id"] = a.AdminUserID
	a.fieldMap["shop_id"] = a.ShopID
}

func (a adminUserShop) clone(db *gorm.DB) adminUserShop {
	a.adminUserShopDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminUserShop) replaceDB(db *gorm.DB) adminUserShop {
	a.adminUserShopDo.ReplaceDB(db)
	return a
}

type adminUserShopDo struct{ gen.DO }

func (a adminUserShopDo) Debug() *adminUserShopDo {
	return a.withDO(a.DO.Debug())
}

func (a adminUserShopDo) WithContext(ctx context.Context) *adminUserShopDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminUserShopDo) ReadDB() *adminUserShopDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminUserShopDo) WriteDB() *adminUserShopDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminUserShopDo) Session(config *gorm.Session) *adminUserShopDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminUserShopDo) Clauses(conds ...clause.Expression) *adminUserShopDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminUserShopDo) Returning(value interface{}, columns ...string) *adminUserShopDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminUserShopDo) Not(conds ...gen.Condition) *adminUserShopDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminUserShopDo) Or(conds ...gen.Condition) *adminUserShopDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminUserShopDo) Select(conds ...field.Expr) *adminUserShopDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminUserShopDo) Where(conds ...gen.Condition) *adminUserShopDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminUserShopDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *adminUserShopDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a adminUserShopDo) Order(conds ...field.Expr) *adminUserShopDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminUserShopDo) Distinct(cols ...field.Expr) *adminUserShopDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminUserShopDo) Omit(cols ...field.Expr) *adminUserShopDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminUserShopDo) Join(table schema.Tabler, on ...field.Expr) *adminUserShopDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminUserShopDo) LeftJoin(table schema.Tabler, on ...field.Expr) *adminUserShopDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminUserShopDo) RightJoin(table schema.Tabler, on ...field.Expr) *adminUserShopDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminUserShopDo) Group(cols ...field.Expr) *adminUserShopDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminUserShopDo) Having(conds ...gen.Condition) *adminUserShopDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminUserShopDo) Limit(limit int) *adminUserShopDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminUserShopDo) Offset(offset int) *adminUserShopDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminUserShopDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *adminUserShopDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminUserShopDo) Unscoped() *adminUserShopDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminUserShopDo) Create(values ...*entity.AdminUserShop) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminUserShopDo) CreateInBatches(values []*entity.AdminUserShop, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminUserShopDo) Save(values ...*entity.AdminUserShop) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminUserShopDo) First() (*entity.AdminUserShop, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AdminUserShop), nil
	}
}

func (a adminUserShopDo) Take() (*entity.AdminUserShop, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AdminUserShop), nil
	}
}

func (a adminUserShopDo) Last() (*entity.AdminUserShop, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AdminUserShop), nil
	}
}

func (a adminUserShopDo) Find() ([]*entity.AdminUserShop, error) {
	result, err := a.DO.Find()
	return result.([]*entity.AdminUserShop), err
}

func (a adminUserShopDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.AdminUserShop, err error) {
	buf := make([]*entity.AdminUserShop, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminUserShopDo) FindInBatches(result *[]*entity.AdminUserShop, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminUserShopDo) Attrs(attrs ...field.AssignExpr) *adminUserShopDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminUserShopDo) Assign(attrs ...field.AssignExpr) *adminUserShopDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminUserShopDo) Joins(fields ...field.RelationField) *adminUserShopDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminUserShopDo) Preload(fields ...field.RelationField) *adminUserShopDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminUserShopDo) FirstOrInit() (*entity.AdminUserShop, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AdminUserShop), nil
	}
}

func (a adminUserShopDo) FirstOrCreate() (*entity.AdminUserShop, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AdminUserShop), nil
	}
}

func (a adminUserShopDo) FindByPage(offset int, limit int) (result []*entity.AdminUserShop, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminUserShopDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminUserShopDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminUserShopDo) Delete(models ...*entity.AdminUserShop) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminUserShopDo) withDO(do gen.Dao) *adminUserShopDo {
	a.DO = *do.(*gen.DO)
	return a
}
