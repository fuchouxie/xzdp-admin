// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		TbBlog:         newTbBlog(db, opts...),
		TbBlogComment:  newTbBlogComment(db, opts...),
		TbShop:         newTbShop(db, opts...),
		TbUser:         newTbUser(db, opts...),
		TbUserInfo:     newTbUserInfo(db, opts...),
		TbVoucher:      newTbVoucher(db, opts...),
		TbVoucherOrder: newTbVoucherOrder(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	TbBlog         tbBlog
	TbBlogComment  tbBlogComment
	TbShop         tbShop
	TbUser         tbUser
	TbUserInfo     tbUserInfo
	TbVoucher      tbVoucher
	TbVoucherOrder tbVoucherOrder
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		TbBlog:         q.TbBlog.clone(db),
		TbBlogComment:  q.TbBlogComment.clone(db),
		TbShop:         q.TbShop.clone(db),
		TbUser:         q.TbUser.clone(db),
		TbUserInfo:     q.TbUserInfo.clone(db),
		TbVoucher:      q.TbVoucher.clone(db),
		TbVoucherOrder: q.TbVoucherOrder.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		TbBlog:         q.TbBlog.replaceDB(db),
		TbBlogComment:  q.TbBlogComment.replaceDB(db),
		TbShop:         q.TbShop.replaceDB(db),
		TbUser:         q.TbUser.replaceDB(db),
		TbUserInfo:     q.TbUserInfo.replaceDB(db),
		TbVoucher:      q.TbVoucher.replaceDB(db),
		TbVoucherOrder: q.TbVoucherOrder.replaceDB(db),
	}
}

type queryCtx struct {
	TbBlog         *tbBlogDo
	TbBlogComment  *tbBlogCommentDo
	TbShop         *tbShopDo
	TbUser         *tbUserDo
	TbUserInfo     *tbUserInfoDo
	TbVoucher      *tbVoucherDo
	TbVoucherOrder *tbVoucherOrderDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		TbBlog:         q.TbBlog.WithContext(ctx),
		TbBlogComment:  q.TbBlogComment.WithContext(ctx),
		TbShop:         q.TbShop.WithContext(ctx),
		TbUser:         q.TbUser.WithContext(ctx),
		TbUserInfo:     q.TbUserInfo.WithContext(ctx),
		TbVoucher:      q.TbVoucher.WithContext(ctx),
		TbVoucherOrder: q.TbVoucherOrder.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
